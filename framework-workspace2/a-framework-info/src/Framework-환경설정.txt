**Spring Framework 개발 환경 설정**

STS (Spring Tool Suite) Eclipse Spring plug-in 설치 
	-> 이클립스상의 Spring 개발 도구 제공

방법1
	help -> eclipse marketplace -> sts  검색 후 core 설치 -> restart 

방법2
	help->install new software->add 후 name은 spring
	location은 아래를 입력 후 core 를 체크하고 설치하면 된다. 
	http://dist.springframework.org/release/IDE

방법3(이클립스 포함된 Spring 개발툴 ) 
	https://spring.io/tools/sts/all  로 가면 
	window 64bit용 이클립스 내장된 스프링개발툴을 받을 수 있다 

==================================================================================	
	
**메이븐 (Maven)**

why? 

Maven(메이븐)으로 Dependency Management : 프로젝트를 수많은 의존 라이브러리에 대한  
신속한 설정과 버전별 통일성있는 관리가 가능  
                                                 

일반프로젝트 -> 해당프로젝트에서 오른쪽 마우스 클릭 -> configure -> convert to maven project 적용 
pom.xml에서 필요한 라이브러리를 설정하면 저장소에 저장된다. 


http://mvnrepository.com/  의존 라이브러리 maven 정보 및 jar 를 다운로드 받을 수 있다.

spring dependencies 정보 
예) 
------------------------------------------------------------------------
	<dependencies>
		<!-- spring web mvc 4.2.5 -> springmvc를 쓰기위한 라이브러리 IOC도 보장-->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>4.2.5.RELEASE</version>
		</dependency>

		<!-- common dbcp 1.4 -> Connection Pool-->
		<!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>

		<!-- mybatis 3.4.0 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.0</version>
		</dependency>

		<!-- spring과 mybatis연동을 위한 라이브러리 -->
		<!-- spring jdbc 4.2.5 -->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.2.5.RELEASE</version>
		</dependency>
		
		
		<!-- spring과 mybatis연동을 위한 라이브러리 -->
		<!-- mybatis spring 1.3.0 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.0</version>
		</dependency>
		
		<!--jstl-->		
		<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>jstl</artifactId>
		    <version>1.2</version>
		</dependency>
			
			
			
		<!-- json -->
		<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.13</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.8.3</version>
		</dependency>
				
		<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
		<dependency>
		    <groupId>commons-fileupload</groupId>
		    <artifactId>commons-fileupload</artifactId>
		    <version>1.3</version>
		</dependency>
				
	</dependencies>
	만약 라이브러리가 여러개 다운받아진 경우 에러 해결 : 
	C:\Users\kosta\.m2\repository 이경로의 repository모두 삭제
----------------------------------------------------------------------------
pom.xml 변경시 해당 프로젝트에서 오른쪽 마우스 클릭 Maven-> Update Project 를 하면 라이브러리가 업데이트 된다.		
or
server > clean

//c > 사용자 > .m2 > repository 에 라이브러리가 다운받아져잇음


===============================================================================================
**Spring Security**

Spring Security : 인증(authentication) : 현재 사용자가 누군지 확인 (일반적으로 로그인)
     및   
     인가(authorization) : 현재 사용자가 특정 대상(URL,기능)을 사용할 권한이 있는지 검사
     및 
     그에 따른 UI 처리, 비밀번호 암호화, 중복로그인 방지 등에 대한 
     기본 구조 및 다양한 컴포넌트를  제공한다 
     


0. DB 구축:  권한테이블정의 - src/test/resources/security.sql
      authorities  

1. Spring Security 관련 의존 라이브러리 추가  
maven pom.xml 
1)spring security 관련 의존라이브러리 추가 
<!-- Spring security -->
 <dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-core</artifactId>
  <version>3.2.5.RELEASE</version>
 </dependency>
 <dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-config</artifactId>
  <version>3.2.5.RELEASE</version>
 </dependency>
 <dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-web</artifactId>
  <version>3.2.5.RELEASE</version>
 </dependency>
 <dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-taglibs</artifactId>
  <version>3.2.5.RELEASE</version>
 </dependency> 
    <dependency>
     <groupId>cglib</groupId>
 <artifactId>cglib</artifactId>
 <version>2.2</version>
    </dependency>
2. web.xml 에 Spring Security 관련 설정파일 로딩 ( spring-security.xml )
<servlet>  
    <servlet-name>appServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/spring-*.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
3. web.xml 에 Spring Security Security Filter 등록 
  <!-- Spring Security -->
   <filter>
     <description>Spring Security Security Filter</description>
     <filter-name>springSecurityFilterChain</filter-name>
     <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>    
    <filter-mapping>
     <filter-name>springSecurityFilterChain</filter-name>
     <url-pattern>*.do</url-pattern>    
    </filter-mapping>
    <!-- 인증 관련 error 일 경우 다음 페이지를 보여준다 -->
    <error-page>
     <error-code>403</error-code>
     <location>/WEB-INF/views/auth_error.jsp</location>
    </error-page>

4. 인증 담당  클래스 정의 (implements AuthenticationProvider) 
   org.kosta.springmvc23.security.MemberAuthenticationProvider
   인증 정보 저장 클래스 정의 
   org.kosta.springmvc23.model.Authority
   
5. Spring Security 설정파일작성 
   spring-security.xml
  
6. 컨트롤러에서 인증 및 인가 처리작업을 수행한다. 
   org.kosta.springmvc23.controller.MemberController
      
7. View 계층에 Spring Security 처리 
   views/templates/left.jsp 
   views/templates/updateForm.jsp 를 확인한다 



--------------------------------------------------------------


/* SPRING SECURITY 를 적용할 경우 
 * 회원 가입시 비즈니스 계층(서비스)에서  회원가입과 권한을 함께 insert하도록 처리한다 (트랜잭션 처리 필요!)
 */
drop table security_member;
create table security_member(
 id varchar2(100) primary key,
 password varchar2(100) not null,
 name varchar2(100) not null,
 address varchar2(100) not null,
 enabled number default 1 not null 
)
delete from security_member;
commit
select * from security_member;


-- 아이디는 userid , 패스워드는 password , 
--탈퇴여부(0은 탈퇴, 1은 가입상태)는 enabled 로 별칭주면 된다 
insert into security_member(id,password,name,address,enabled) 
values('java','1234','아이유','판교',1);

select id,password,name,address,enabled from security_member
where id='java' and enabled=1;

/*
 * SPRING SECURITY는 권한이 일치하는 대상에 대해 인가하기 때문에 
   관리자 권한 즉, ROLE_ADMIN을 보유하고 있더라도 
   사용자 권한인 ROLE_USER를 보유하고 있지 않을 경우 접근을 못하게 된다 
   따라서 한 유저는 여러개의 권한(1:n)을 보유할 수 있어야 하므로 테이블을 생성한다 
 */
drop table authorities;
create table authorities(
 username varchar2(100) not null,
 authority varchar(30) not null,
 constraint fk_authorities foreign key(username) references security_member(id),
 constraint member_authorities primary key(username,authority)
)
delete from authorities;
insert into authorities(username,authority) values('java','ROLE_ADMIN');
insert into authorities(username,authority) values('java','ROLE_MEMBER');

select * from authorities;

commit









