***Framework 개념정리***
 - Spring Framework 의 주요 개념
	- IOC(DI와 DL)
	- AOP
	- Spring MVC
		
		(TilesFramework)	  (IOC)					(IOC)
			View		-	Controller		-		Model			-				DB
											Service		DAO-MyBatisFrameWork
						   프리젠테이션계층	    비즈니스계층			영속성계층
--------------------------------------Spring--------------------------------------------
==========================================================================================	
		
 - MyBatis Framework

==========================================================================================		 

 - Tiles Framework
	
==========================================================================================		 	
용어정리
 - Module(모듈) : 독립적인 기능단위를 가진 소프트웨어
 - 응집도(cohesion) 와 결합도(coupling)
 	->"응집도는 높이고, 결합도는 낮춘다"
 	- 응집도(cohesion) : 하나의 모듈이 하나의 역할을 담당
 	- 결합도(coupling) : 모듈 간의 상호 의존도(의존도를 낮추는 것이 좋은 프로그래밍)
 	
 - Object : 객체지향 시스템의 기본 단위로 기능과 속성을 가지고 있다
 
 - Class : Object의 설계도(Object 생성을 위한 틀)
 
 - library : 재사용 가능한 클래스들의 모음
 
 - API(Application Programming Interface) : 응용프로그램을 개발하기 위한 인터페이스
 
 - package : 클래스들을 분류하기 위한 것
 
 - component : 프로그램(class or object)들이 모여 독립적인 기능단위를 구성하고
 			    부품화될 때 컴포넌트라고 한다
 			    
 - Framework : 뼈대, 틀
 			    -소프트웨어를 설계,구현,운영,TEST 하기 위한 기반을 제공
 			    - 반완전한 어플리케이션을 제공(나머지는 현지화-customizing)
 			    -> component + module + pattern
 			    : 어플리케이션(또는 시스템) 을 설계,구현,운영하기 위한 다양한 지원을 통해
 			        비즈니스(업무)에 집중할 수 있도록 하는 것이 Framework   	
 			        
 			        
 - library : 모두 공개
 - api : 소스 코드는 공개하지 않되, 사용할 수 있게			    
==========================================================================================		 			    
IOC(Inversion Of Control)
 - 제어의 역행(역제어) 
 	-> 응집도를 높이고 결합도를 낮추기 위해
 	-> 계층간의 의존관계의 결합도를 낮추기 위해 적용(loose coupling)
 	-> 각각의 영역들이 부품화되어 갈아끼워져도 프로그램에 영향이 없게
 	-> 왜? 기존의 제어방식은 사용자측에서 필요로 하는걸 생성하거나 확보했어야 햇지만, 역제어 방식으로 낮은 결합도-> 유지보수성 향상
	  			    
 	ex)
	 	<기존제어방식> 
	 	 사용자 ----->	 new 대한항공() --> 대한항공 티켓
	 			   		 new 아시아나() --> 아시아나 티켓
	 			 		 new JAL()	  --> JAL 티켓	
	 			 	 		    
		<역제어방식> : 고객은 new Ticket만 하면 됨 - 상위 인터페이스만 알면 항공사가 바뀌어도 큰 영향을 받지 않음	
						    (Spring Container or IOC Container)
		고객	 <----------------------	   여행사 		<--------------------	대한항공	--- Ticket	
													<--------------------	아시아나	--- Ticket
													<--------------------	 JAL	--- Ticket
													
	--> 기존 제어 방식은 사용하는 측에서 객체를 생성(or 확보) 했다면		
		IOC(제어의 역행) 방식은 IOC Container에서 사3용자가 필요로 하는 객체를 생성하여
		사용자 측으로 객체를 주는 동작원리로
		결합도를 낮추어 유지보수성을 향상시킨다	

	--> Spring Container 는 config를 필요로 한다(xml or Annotation)						 	
			
--------------------------------------------------------------------------------------------- 	
 - IOC 적용을 위한 기법 : DL & DI --> 첫 출발은 DL이지만, 개발자가 아닌 사람들은 DI만 본다	
 	- DL(Dependency Lookup) 
		: 의존 대상(사용할 객체) 을 검색(lookup)을 통해 반환받는 방식
 		// 보통 Controller에서 - factory.getBean() : 필요로하는 대상을 id로 검색해서 container로부터 객체를 받는다
 		
 	- DI (Dependency Injection)  
 		: 의존 대상(사용할 객체) 을 주입(inject)을 통해 받는 방식
 		// 보통 xml 파일에서		   
 		
 	- 인터페이스 타입으로 구현하는 것이 바람직하다	
 		: 구현체의 정보를 몰라도 인터페이스의 명세만 익히면 여러 객체를 사용할 수 있다.
 		
 		ex)
 	
		1. 생성자에 변수 값 넣기
			<bean id="bat" class="model.Bat">
				<constructor-arg>
					<value>미즈노</value>
				</constructor-arg>
				<constructor-arg>
					<value>10</value>
				</constructor-arg>
			</bean>	   
			
		2. 클래스의 변수 set
			<bean id="person" class="model.Person">
		
				<property name="name">
					<value>김성환</value>
				</property>
				<property name="age">
					<value>22</value>
				</property>
				<property name="bat">
					<ref bean = "bat"/><!-- bat을 참조해야해서 -->
				</property>
			</bean>
		 
==========================================================================================		 
			    
// BeanFactory <--- ApplicationContext <---ClassPathXMLApplicationContext(=Spring IOC Container)
 	객체공장
 1. BeanFactory
	-> 왜 container에서 BeanFactory가 가장 상위(중요) 인터페이스일까
	-> cf) Web Container가 제공됨으로써 우리가 가진 장점이......?-->jsp,servlet을 웹컨테이너에서 해석해서...
	-> 서블릿(서버상에 올려두면 잘 돌아가는 자바 클래스)
	-> SpringContainer의 정체성은 BeanFactory이고, 그 이유는 IOC/"DI"/DL이다!
		-> SpringFrameword에선 SpringContainer에서 IOC를 통해 객체를 만들어 사용자측에 제공하기때문에 BeanFactory가 가장 상위 인터페이스이다
	
	-> SpringContainer가 만들어질때 설정정보를 xml또는 Annotation 방식으로 읽은 후
	    그에따라 객체를 만들어 놓는다.
	-> DBCP --> SpringContainer --> DAO 
	   DAO  --> SpringContainer --> Service 			    
 	   Service --> SpringContainer --> Controller
 	   
 	   Container에서 전달할때, MemberService자체를 전달하는 게 아니라 대리인(proxy)을 전달한다
 	   만약 MemberService가 인터페이스를 implements한 클래스라면 인터페이스를....해서 전달하고
 	   인터페이스를 implements한 클래스가 아니라면 MemberService를 상속받는 자식클래스를 전달한다.
 	   
 	   
 	   					<<Interface>>
 	   					AccountService
 	   				|					|
 	   			Proxy	  --ref--->	AccountImpl
 	   USER				
 	   
 2. ApplicationContext : 스프링프레임워크의 환경이 제공된다
	SpringContainer에서 DAO를 만들어 Service에 역제어 할 때, DAO 객체 + 프록시가 제공된다
		
 
==========================================================================================		   	    

** Maven**
Dependency Management : 의존 라이브러리 관리
->	프로젝트에서 필요한 의존 라이브러리에 대한 신속한 설정과
   	버전별 관리가 가능하다

   	pom.xml : pom(project object model)
==========================================================================================	
   	
** Log4J**
자바 어플리케이션을 위한 로그 라이브러리
로그를 레벨별로 작성(콘솔 및 파일)
trace < debug < info < warn < error < fatal

==========================================================================================	

** AOP **
Aspect Oriented Programming

AOP는 관점지향 프로그래밍이다.
	시스템을 핵심(Core)관심사항과 공통(or 횡단 or cross-cutting or common)관심사항으로 
	구분하여 분석, 설계, 구현, 운영한다

-> 	AOP는 공통관심사항을 별도의 모듈로  설계,구현하여
	생산성과 유지보수성을 향상시키는 것을 목적으로 한다.
	
- AOP 용어
	- advice : 공통 관심 사항을 어느 시점에 적용할 것인가
				before advice, after advice, after-returning advice
				after-throwing advice, around advice
	- pointcut : 공통 관심 사항을 적용하는 대상을 지정 or 적용 대상을 정하는 알고리즘
				within()
				execution()
				
	ex) 
		Service		----weaving----	AOP
	회원서비스 Core			  	   Common	
	상품서비스 Core 			    .  
		
		pointcut을 위한 기술 : aspectj
cf)----------------------------------------------------------------------------------------------
" AOP는 OOP를 더욱 OOP답게 한다 "

-> 그 이유는 
	기존 OOP 방식은  객체지향 프로그래밍 이란 캡슐화, 다형성, 상속 을 이용하여 
	코드 재사용을 증가시키고, 유지보수를 감소시키는 장점을 얻기 위해서 객체들을 연결 시켜 프로그래밍 하는 것인데, 
	최근 기능이 점점 다양해지고, 변화가 자주 일어나는 추세를 반영하여
	코드의 재사용성보다는
	 코드의 중복을 줄이고 여러 기능의 공통 관심사항을 따로 모듈화하여 생산성과 유지보수성을 향상시키기때문이다

-> AOP는 IOC기반이다

	: 그 이유는 IOC의 DI,DL - 객체를 주입, 검색을  통해 AOP가 가능해지기 때문이다

==========================================================================================	

** MyBatis **
: JDBC Framework


		
	   <DAO>
app		-		lib(jar - class)
	\			/
	   config
	SqlSessopmConfig.xml	-	mapper
	(dbcp설정)				  member.xml
							  company.xml
							  movie.xml
							  	.....	

==========================================================================================	
Spring 설정파일
1. web.xml
	- welcome파일
	- dispatcherservlet
	- 한글 인코딩 처리(filter)

2. spring config xml
	- handlermapping
	- viewResolver
	- controller
	- 
3. mybatis config xml

==========================================================================================

**Annotation** 
 주석이 선언적 프로그래밍 모델( 설정정보 : 메타데이터)을
 지원하는 기술 (컴파일 및 런타임시 반영)
 ex) @Repository , @Service , @Controller 
    @AutoWired , @Resource , @Inject , @Named 
 
 참고 ) 메타데이터 - 데이터의 데이터 
	     데이터를 설명하기 위한 데이터 
	        ex) 설정정보 
        
 메타데이터로서의 xml과 annotation
 xml : 유지보수성 측면
 annotation : 개발생산성 측면  
 
 -> IT가 발전함에 따라 개발 및 유지보수의 규모가 커짐 
     XML 설정 정보가 방대해진다 
     -> Annotation은 직관적 메타데이터 설정이 가능 
         (소스와 메타데이터가 결합되는 형태)
        -> 시스템 전반에 영향을 주는 메타 데이터는 
            XML로 설정하여 코드에 독립적으로 
            분리되어 정의되는 것이 바람직하고 
            설계시 확정되는 부분은 Annotation 기반 설정으로
            개발의 생산성을 향상시키는 것이 바람직하다 
    
  Spring Annotation : Meta Data 로서의 역할 
  
  Spring Configuration(스프링 설정) : XML + Annotation   
     
  Spring Annotation의 종류 
  : 컴포넌트 계열 어노테이션 
   @Repository : 영속성 계층에서 사용 
   @Service : 비즈니스 계층에서 사용 
   @Controller : 프리젠테이션 계층에서 사용 
   
  : Dependency Injection 
    @AutoWired : 의존 대상 객체를 타입으로 검색해 주입 
			         만약 동일한 인터페이스 타입의 객체가 여러개 일 경우 
			     Exception 발생 
			     
    @Resource   : 의존 대상 객체를 타입으로 검색해 주입  
    or
    @Resource(name="bean id") : 의존 대상 객체를 이름으로 검색해 주입     *** 
    
    @Inject : 의존 대상 객체를 타입으로 검색해 주입  
    
    @Named("bean id") : @Inject와 @Named를 함께 명시하면 이름으로 주입 
    
    예)  @Service
      public class MemberServiceImpl{}
      --> 위 클래스가 스프링 컨테이너에 의해 객체 생성시에는 
           별도의 이름 명시되어 있지 않으므로 
           소문자로 시작하는 memberServiceImpl bean이 생성된다 
           
------------------------------------------------------------------           
 spring config xml (설정파일) 상에서의 Annotation 설정           
 <!-- 의존관계설정(bean생성) : org.kosta.springmvc13 패키지 이하의  
 어노테이션 명시되어 있는 클래스의 객체를 생성하도록 설정  -->
<context:component-scan base-package="org.kosta.springmvc13" />
<!-- SpringMVC 어노테이션 컨트롤러 설정 -->
<mvc:annotation-driven />   

 			    