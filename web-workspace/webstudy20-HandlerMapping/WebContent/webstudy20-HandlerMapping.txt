** Model2 구조 **

MVC Pattern이 근간을 이룬다

Model : business + data access logic
		java beans(or component)
		ex) DAO, Service , DTO , VO 등
		cf) component란 object들이 서로 교류하면서	
			독립된 기능단위가 될 때, 컴포넌트라고 한다
			-> ex) 뇌세포(객체) 들이 모여 뇌(컴포넌트) 구성
			
View  :	화면을 전담
		JSP (Java Server Page)가 담당

Controller	:	웹어플리케이션의 제어

				클라이언트의 요청을 분석		request.getPAtameter(command)
				
				Model과 연동 				DAO.getInstance().find....()
					
				연동 결과를 공유				request.setAttribute(name, value)
				
				응답을 위한 View 에 이동		forward or redirect
//1. 				
client --- FindServlet	
client --- UpdateServlet	
client --- DeleteServlet				
--> 위의 경우에는 Servlet이 계속 증가
--> controller영역에서 일관성, 재사용성, 통일성 있는 정책을
	적용하는 데에 한계가 있다 

//2. --> 기존 Model2 MVC에 Front Controller Pattern 적용
client --- DispatcherServlet
client --- DispatcherServlet
client --- DispatcherServlet
--> 모든 client의 요청을 하나의 서블릿에서 처리하도록 설계
--> 이 경우, DispatcherServlet의 업무량이 급증할 수 밖에 없다

//3. --> 2번에서 Controller Logic별로 분업화 시키는 설계 적용
client --- DispatcherServlet --- 		Controller  
									| 				|
								FindController		UpdateController
								
--> 위와 같이 계층구조를 통한 표준화 정책을 Controller Interface와
	하위 구현체(FindController, ...등) 로 설계하면
	Encapsulation, Inheritance, Polymorphism 의 장점을 가진다
--> 시스템의 요구사항이 복잡해질수록 FrontController인 DispatcherServlet의 
	Controller 구햔체 생성 부분이 증가될 수 있다
	이에 DispatcherServlet과 개별 Controller(ex - FindController...)와의 
	결합도를 낮추고 구현체 생성 부분을 별도의 Class가 담당하도록
	HandlerMapping(Factory Class) 을 추가 설계한다
		
//3.
client --- DispatcherServlet --- HandlerMapping	--- Controller 							

DispatcherServlet : FrontController
					client 요청을 받는다
					HandlerMapping을 이용해 개별 Controller 하위 구현체를
					Controller Interface 타입으로 반환받는다
					Controller Logic을 실행시킨다
					실행 후 반환되는 url 및 이동방식에 의거해
					Model 연동 결과 공유 후
					View로 이동시킨다(forward, redirect)
					s
HandlerMapping	:	Controller 구현체 생성을 전담하는 객체
					Simple Factory Pattern

Controller	:	실제 Controller Logic을 전담하는 구현체들의
				상위 표준 interface
