**review**

- html , javascript , css , Servlet , JSP

	HTML :	웹문서의 컨텐트 ( 내용 )
	
	Javascript	:	웹문서의 동작 ( 행위 )
	
	CSS	:	웹문서의 레이아웃( 디자인스타일 )
	
	Servlet	:	Java Web Application을 위한 기술
				Java code 내에서 html을 기술하여 출력
				Model2 Archtecture에서 컨트롤러 역할을 담당
				
	JSP	:	Java Server Page 
			즉 동적인 웹페이지를 구현하기 위한 기술
			웹컨테이너에 의해 Servlet으로 변환되어 실행
			( JSP 는 Servlet이다 )
			Model2 Architecture에서 View 역할
	
	HTTP	:	HyperText transfer Protocol
	
	WAS	:	Web Application Server
			Web Server	+	Web Container
			(html service)	(Servlet, JSP실해환경)	
			
	Web Container	:	Servlet , JSP 실행환경
						Servlet 라이프 사이클 관리
						(init(ServletConfig) -> service(request, response) , destroy())
						JSP 를 Java(Servlet class)로 변환하고 컴파일
	
	DD( Deployment Descriptor 배포기술서)
	-> 웹어플리케이션이 최초 실행시 읽어서 로드하는 정보
	-> web.xml :	welcome file 대문화면
					Servlet 설정, ServletConfig 초기파라미터 설정
					ServletContext 초기 파라미터 설정
					ServletContextListener 설정
					
	html form get & post 요청방식(전송방식)
	- get	: 정보조회용 -- DB의 select같은거 , url 노출 , 보안성 떨어짐 , 대용량 전송 불가능
			  tomcat\server.xml 에서 URIEncodig = "" 으로 get방식 한글처리 설정
	- post	: 정보전송용 -- 정보갱신(DB insert) or 로그인(패스워드 숨기기) , url 노출x , 보안성 우수 , 대용량 전송 가능
			  별도의 한글 처리가 필요
			  
			  
	Servlet LifeCycle
	
	class loading -> 객체생성(생성자 호출) -> init(ServletConnfig)
	위 과정은 최초 1번 실행	
	service(request , response)	--> doGet(request, response)
										or
									doPost(request , response)
	클라이언트 요청시마다 매번 실행된다								
	
	Q1. 클라이언트 로그인 서비스
									LoginServlet
	100명	--------------------> 	  객체 1개 
									  init 1번
									ServletConfig 1개		
									service 100번
									(request 100번,	response 100번)
									ServletContext 1개
									
									
	ServletConfig	:	서블릿 객체 당 하나
						--서비스를 100번해도 객체는 하나만 만들어짐!
						init() 호출 시점에 컨테이너가 주입
						개별 서블릿이 웹서비스에 필요한 설정 정보 객체		
						
	ServletContext	:	웹어플리케이션 당 하나
						웹 어플리케이션 최초 실행시 생성된다
						웹 어플리케이션 차원의 정보를 저장하고 
						모든 서블릿과 JSP가 공유해 사용할 수 있는 객체				
	cf) POJO	  
	
	JSP	LifeCycle	:	
	
	cf) web container 가 변환시켜 저장하는 공간
		: tomcat\work 아래에 저장
	
	.jsp --> .java --> .class --> 객체 생성 --> init(ServletConfig)
	위 과정은 최초 요청시(실행시) web container에 의해 한번 실행
	
	service(request, response) 
	매번 요청시마다 실행된다
	
	destroy()
	해제 직전
	
-JSP 기본 문법 
	1. <%@	%>		지시자(web container에게 현 jsp 정보 제공 - ex) import, encoding , errorPage , session)
	2. <% 	%>		스크립틀릿 , 서비스 메서드 내에 자바 기술
	3. <%=	%>		출력
	4. <%--	--%>	주석
	5. <%!	%>		멤버 변수  or 메서드 선언
			  