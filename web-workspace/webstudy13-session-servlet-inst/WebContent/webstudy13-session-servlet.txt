**Session 관리**
Session : 사용자 상태 정보 유지 

HTTP 은 상태정보를 유지하지 않는 특성(stateless)이 있다
Session 관리란 일정 조건동안 사용자 상태를 유지하기 위해서 
Cookie 또는 HttpSession을 이용하는 것을 의미한다 

Cookie : 클라이언트 측에 사용자 상태 정보를 저장 
		  데이터 타입은 문자열로 한정되고 
		  용량도 제한이 있다. 
		  클라이언트 측에서 사용을 제한할 수 있고 
		  HttpSession에 비해 보안성도 약하다 
		  Cookie는 클라이언트 측에 저장되므로 서버의 부담을 줄일 수 있다
		  Cookie 유효시간을 설정 
		  만약 유효시간을 설정하지 않으면 브라우저가 실행되는 동안만
		  유지된다 
		  
HttpSession : 서버측에 사용자 상태 정보를 저장 
				쿠키와 다르게 저장 데이터 타입 및 용량은 제한없고
				보안성이 높다 
				 WAS(Tomcat)의 기본 세션 유지시간은 30분으로 설정
				 별도로 각 web application에서는 자신의 DD(web.xml)에 
				 세션 유지시간을 설정할 수 있다 
				 		  
		  		주요메서드 
		  		request.getSession() : HttpSession 
		  		내부적으로 client의 cookie 정보를 확인하여 
		  		기존 세션 정보가 있으면 기존 세션 객체를 반환 
		  		기존 세션 정보가 없으면 세션을 새로 생성 
		  		
		  		request.getSession(false) : HttpSession
		  		내부적으로 client의 cookie 정보를 확인하여 
		  		기존 세션 정보가 있으면 기존 세션 객체를 반환 
		  		기존 세션 정보가 없으면 null을 반환 
		  		
		  		HttpSession의 주요 메서드
		  		session.setAttribute(name,value); // 세션객체에 정보할당 
		  		session.getAttribute(name): Object // 세션 객체에서 정보반환
		  		session.removeAttribute(name) //세션 객체에서 정보삭제 
		  		session.invalidate(); // 세션을 무효화 ( ex- 로그아웃 ) 
		  		
		  		client browser에서 요청을 하면 
		  		Servlet or JSP에서 인증여부를 확인한 후 
		  		인증 정보(ID,PASSWORD)가 일치하면
		  		request.getSession() 을 실행하고 
		  		이 때 WAS는 자신이 생성한 개별 클라이언트에 대한 
		  		유일한 세션 아이디를 발급하여 Cookie로 클라이언트에
		  		전송하여 저장하게 한다 
		  		
		  		이후 로그인 인증 여부(or 세션 존재 유무)는 
		  		이때 발급하여 저장한 클라이언트 측의 쿠키에 
		  		세션아이디가 존재하는 지 여부에 따라 판단한다 
		  		
		  		( ex : 네이버에 로그인 후 쿠키를 삭제하면 로그인이 해제됨)
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		 
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		
		  		 
		  		
		  		
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
 