**Servlet 기본**
1. 환경설정 
	: WAS(apache-tomcat) 설치 및 설정 
	  -> conf/server.xml      웹포트 변경( 오라클 웹포트와 중복되므로)
	  							   get방식 요청시 한글처리를 위해
	  							   URIEncoding="utf-8"
      -> conf/context.xml     reloadable="true"
      							   개발시점에 변경되는 코드를 
      							   자동으로 리로딩하도록 설정 
      							   (workspace --배포--> webapps ) 
      							   
 2. Servlet 
     								WAS ( web server + web container ) 
     browser --request-->     							                 <--> DB
      			<--response--				   
      							   
     --------------------------------------------------------------------------------
     browser :  html 문서를 번역    							   
      			  html,javascript,css를 해석하여 웹화면을 제공 
      			  http 기반 메세지를 송수신 
     
     http :  hypertext transfer protocol 
     
     WAS : Web Server 와 Web Container 
     
     Web Server : html 서비스 
     
     Web Container :	servlet container or jsp engine 이라고도 한다 
     					Servlet 과 JSP 가 실행될 수 있는 
     					환경을 제공한다 
     					( Servlet&JSP library , Servlet LifeCycle ,
     					JSP를 Java(Servlet)로 변환 등.. ) 
     					    
    http 요청방식 GET 과 POST
    
    GET 방식 :  정보 조회 용도 
    				모든 링크는 GET방식으로 요청된다 
    				브라우저 URL에 노출된다 
    				전송 데이터 양은 한정된다 
    				Form tag에서 별도의 method(전송방식)을 
    				명시하지 않으면 기본이 get방식으로 요청된다 
    POST 방식 :  정보 전송 용도 
    				 브라우저 URL 에 노출되지 않고 HTTP body부분으로
    				 전송된다. 즉 보안성이 get방식보다 높다 
    				 사용자 정보 및 많은 용량의 데이터는 
    				 POST으로 전송해야 한다 
    				 POST 방식으로 전송되는 데이터에 대한 
    				 서버 프로그램 차원에서의 별도의 한글처리가 
    				 필요하다 
    				 ( request.setCharacterEncoding("utf-8"); )
    
    client 								Servlet
    http get방식 요청 -------> doGet(request,response)
    
    http post방식 요청 ------> doPost(request,reponse) 
    
    
    web.xml : DD (Deployment Descriptor) 
    			웹어플리케이션의 설정정보(메타정보)를 명시한다
    			Web application 최초 시작할 때 DD 파일을 로딩한다 
    			( ServletConfig , ServletContext , Session 설정 등 )
    
    **메타데이터(meta-data)**
    데이터의 데이터. 설정정보 
    웹어플리케이션의 메타데이터는 XML 과 Annotation 으로 
    작성 가능하다 
    Annotation : 의미있는 주석 @Override , @WebServlet(url) , 
    								  @Controller 등 .. 
    				소스코드 + 메타데이터가 결합하는 방식 
    								  
    XML : eXtensible Markup Language 
    		확장 가능 마크업 언어 
    		-> 주로 메타정보를 저장할 때 사용 
    			-> 2000년 중반에는 Ajax 를 위해 사용했으나
    				최근에는 JSON으로 대체 
            소스코드 + 메타데이타가 분리되는 방식 
            
     web.xml  상에서 서블릿 설정 
   <servlet>
   		<!-- 서블릿 이름:임의로 정하며 servlet-mapping과 연결 --> 
  		<servlet-name>mst</servlet-name>
  		<!-- 실제 클래스의 팩키지명과 클래스명  -->
  		<servlet-class>step2.MethodServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	    <!-- servlet 태그의 servlet-name과 일치   -->
  		<servlet-name>mst</servlet-name>
  		<!-- client에서 요청하는 서버 프로그램 url (action) --> 
  		<url-pattern>/ms</url-pattern>
  </servlet-mapping>       
            
  확인해볼 용어 
  Servlet : java Server program을 구현하기 위한 기술 
  			 자바 웹어플리케이션 구현을 위한 기술 
  			 
  WAS : Web Application Server ( Web Server + Web Container ) 
  									httpd		jsp&Servlet
  								
  HTTP : HyperText Transfer Protocol 
  
  browser : web client program , http를 이해,분석하고
  				 html(javascript,css포함)을 번역하여 실행 
  				 
  Web Server	: html을 서비스할 수 있는 역할 		
  		 
  Web Container : Servlet , JSP 실행환경 ( Thread, LifeCycle 등 ) 
  
  web.xml  : Deployment Descriptor 웹어플리케이션 설정정보 기술
  			 각 web application(webstudy1 webstudy2....)은 각각 하나의 DD를 갖고 있다
  			 cf)server.xml에서 포트변경/URI-ENCODING, context.xml에서 reloadable=true로 변경한 것은 WAS전체 설정
  			 	각 web application에서 web.xml을 수정하는 것은 각 web application 설정
  			 	->웹 컨테이너와 웹 프로그램의 파일을 서로 연결하고 관리하는 설정 파일
  			 	->DD에 명시하면 webapp 시작시 로딩
  			 	->ex) welcome file - 실제 파일명을 안써도 대문이 나옴
  			 -->소스코드와 설정파일을 분리시킴으로써 이후 변경되는 사항에 대한 작업이 쉬워져 유지보수성 향상		
  			 +Config 초기화 (init-param 안에 이름/값을 저장)	
  			 
  form method : 요청방식  
  
  form action : 요청을 처리할 서버 프로그램 url 
  
  get방식 post방식 :  get -> 정보조회 ( url 노출 ) , 
  						  post-> 정보전송 ( url 노출 x , 보안성 우수 )
  						  
  javascript : client-side-script ( html 에서 동적인 역할 담당 )
  				 최근에는 server-side-script로도 역할을 한다 
  				 
  HttpServletRequest와 HttpServletResponse 
  클라이언트 요청정보      클라이언트에게 응답하기 위한 정보 
  생각해볼점 )  Servlet , HttpServletRequest , HttpServletResponse , 
  				    ServletConfig, ServletContext
  				    --> 위의 모든 요소들이 모두 다 인터페이스이다 
  				    	  왜 많은 주요 요소들이 인터페이스로 
  				    	  설계했을까? 
  						  플랫폼 독립적 , 표준화 , Polymorphism, Inheritance , Encapsulation
  						  WAS 종류가 바뀌어도 코드에 변함이 없음  						  
	cf) 
	public interface HttpServletRequest
	extends ServletRequest
	--> 인터페이스끼리는 상속 --> 일반클래스가 implements하기 전까지 오버라이딩을 미룸
	
	
	cf) web은 3tier 이상
	-3tier : DB 서버, 클라이언트(browser), 미들웨어(WAS)로 구성되어 있다
	--------------------------------------------------------------------------------							   
  
  내일 수업 주요 목차 
  - request.getParameterValues() 
  - Servlet LifeCycle 
  - ServletConfig
  - ServletContext          
            
     					   			  				   
      							   
      							   
      							   
      							   
      							   
      							   
      							   
      							   
      							   
      							   
      							   
      							   
      							    